//-----------------------------------------------------------------------------
// File: packcage.cpp
//-----------------------------------------------------------------------------
#include "packcage.h"
//-----------------------------------------------------------------------------
using namespace std;
//-----------------------------------------------------------------------------
// Первичная установка зерна генератора
void randomize()
{ srand((unsigned)time(NULL)); }
//-----------------------------------------------------------------------------
// Создать случайное целое число из [a, b]
int iRandom( int a, int b )
{ return a + (b - a + 1) * rand() / RAND_MAX ; }   
//-----------------------------------------------------------------------------
 // Создать случайное дробное число из [a, b]
double dRandom( int a, int b )
{ return a + (b - a) * rand() / (double)RAND_MAX; }   
//-----------------------------------------------------------------------------
// Печать новой строки (опционально)
void printEndl() { std::cout << endl; }
//-----------------------------------------------------------------------------
// Предустановка
//-----------------------------------------------------------------------------
void setup(bool &p, bool &d)
{
	randomize();
	system("chcp 1251 > nul");
	cout << "Инициализация...\nВведите константы PRINT (0/1) и DEBUG (0/1): ";
	cin >> p >> d;
}
//-----------------------------------------------------------------------------
// Ввод данных
//-----------------------------------------------------------------------------
void inputData(int &size, int &dif)
{
	cout << "Введите размер массива: ";
	cin >> size;
	while (size <= 0) {
		cout << "Некорректный размер, повторите: ";
		cin >> size;
	}
	cout << "Введите тип генерации данных [0/1/2/3]: ";
	cin >> dif;
}
//-----------------------------------------------------------------------------
void generateArr(int *m, int s, int dif) // Генерация массива данных (int)
{	
	switch (dif) {
		case 0:
			for (int i = 0; i < s; ++i)
				m[i] = i;      // отсортирован по возрастанию
			break;
		case 1:
			for (int i = 0; i < s; ++i) // случайный набор данных
				m[i] = iRandom(-999, 999);
			break;
		case 2:
			for (int i = 0; i < s; ++i)
				m[i] = s - i;  // отсортирован по убыванию
			break;
		case 3:
			cout << "Введите массив: ";
			for (int i = 0; i < s; ++i)
				cin >> m[i];   // Ввод от юзера
			break;
		default:
			for (int i = 0; i < s; ++i)
				m[i] = 0;      // заполнить 0-ми
	}
}
//-----------------------------------------------------------------------------
void generateArr(double *m, int s, int dif) // Генерация массива данных
{	
	switch (dif) {
		case 0:
			for (int i = 0; i < s; ++i)
				m[i] = i;      // отсортирован по возрастанию
			break;
		case 1:
			for (int i = 0; i < s; ++i) // случайный набор данных
				m[i] = dRandom(-999, 999);
			break;
		case 2:
			for (int i = 0; i < s; ++i)
				m[i] = s - i;  // отсортирован по убыванию
			break;
		case 3:
			cout << "Введите массив: ";
			for (int i = 0; i < s; ++i)
				cin >> m[i];   // Ввод от юзера
			break;
		default:
			for (int i = 0; i < s; ++i)
				m[i] = 0;      // заполнить 0-ми
	}
}
//-----------------------------------------------------------------------------
TestData::TestData()
{ count = 0; m[0] = 0; m[1] = 0; m[2] = 0; n[0] = 0; n[1] = 0; n[2] = 0; }
//----------------------------------------------------------------------------
void TestData::print(const char *comment)
{ 
	cout << "\t Метод: " << comment << endl;
	for (int i = 0; i < count; i++) {
		cout << "\t\t Тест #" << i+1;
		cout << " Тип: " << ((type[i])?"по-возрастанию ":"по-убыванию ");
		cout << m[i] << "/" << n[i] << endl; 
	}
	cout << endl;
}
//----------------------------------------------------------------------------